# This file is an example to demonstrate the features gpg-batch.sh.
# Tested with GnuPG version 2.4.4
# A detailed description of the parameters can be found
# on the official website of the GnuPG project:
#   https://www.gnupg.org/documentation/manuals/gnupg-devel/Unattended-GPG-key-generation.html

# Print text as diagnostic.
%echo Generating an OpenPGP RSA (algo 1) key

# Set RSA or 1
# The register does not matter
Key-Type:      RSA

# RSA keys may be between 1024 and 4096 bits long
# Default: 3072
Key-Length:    Default

# Default: sign, cert, encrypt, auth [SCEAR]
# The register does not matter.
# The separator can be either a comma or a space.
Key-Usage:     Cert

#    0 = key does not expire
# <n>  = key expires in n days
# <n>w = key expires in n weeks
# <n>m = key expires in n months
# <n>y = key expires in n years
# Default: 0
# The register does not matter.
Expire-Date:   1Y

Subkey-Type:   1
Subkey-Length: 1048

# Default: sign,encrypt,auth [SEA] (cert - not supported)
Subkey-Usage:  Auth
Expire-Date:   1m

Subkey-Type:   RSA
Subkey-Length: 2000
Subkey-Usage:  Encrypt
Expire-Date:   1w

Subkey-Type:   RSA
Subkey-Length: 3072
Subkey-Usage:  Sign
Expire-Date:   1d

Name-Real:     Tester
Name-Email:    tester@example.com
Name-Comment:  gpg-batch.sh: RSA

# Using this option allows the creation of keys without any passphrase protection.
%no-protection

# If given the keys are created using a faster and a
# somewhat less secure random number generator
%transient-key
